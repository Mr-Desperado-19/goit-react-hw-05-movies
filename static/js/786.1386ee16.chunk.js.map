{"version":3,"file":"static/js/786.1386ee16.chunk.js","mappings":"8PAgCA,MA5BA,SAAcA,GACZ,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAWA,OATAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,qGAC4BC,EAAAA,EAAAA,IAAgBL,EAAMM,SADlD,OACQC,EADR,OAEEJ,EAAQI,EAAYL,MAFtB,4CADc,uBAAC,WAAD,wBAMdM,EACD,GAAE,CAACR,EAAMM,WAGR,4BACE,kEACA,wBACGJ,EAAKO,KAAI,SAACC,GAAD,OACR,wBAAoBA,EAAMC,MAAjBD,EAAME,GADP,QAMjB,C,sICSD,MA/BA,SAAiBZ,GACf,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOY,EAAP,KAAgBC,EAAhB,KAWA,OATAV,EAAAA,EAAAA,YAAU,WAAM,wCACd,qGAC4BW,EAAAA,EAAAA,IAAgBf,EAAMM,SADlD,OACQU,EADR,OAEEF,EAAWE,EAAYC,SAFzB,4CADc,uBAAC,WAAD,wBAMdT,EACD,GAAE,CAACR,EAAMM,WAGR,4BACE,kEACA,wBACGO,EAAQJ,KAAI,SAACS,GAAD,OACX,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAON,GADL,QASpB,C,wJCqBD,MA5CA,SAAsBZ,GACpB,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOoB,EAAP,KAAcC,EAAd,KACA,GAAwBrB,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOY,EAAP,KAAgBC,EAAhB,KAiBA,OAfAV,EAAAA,EAAAA,YAAU,WAAM,wCACd,yGAC0BmB,EAAAA,EAAAA,IAAgBvB,EAAMwB,MAAMC,OAAOnB,SAD7D,cACQoB,EADR,OAEEJ,EAASI,GAFX,UAI4BrB,EAAAA,EAAAA,IAAgBL,EAAMwB,MAAMC,OAAOnB,SAJ/D,cAIQC,EAJR,OAKEJ,EAAQI,EAAYL,MALtB,WAO4Ba,EAAAA,EAAAA,IAAgBf,EAAMwB,MAAMC,OAAOnB,SAP/D,QAOQU,EAPR,OAQEF,EAAWE,EAAYC,SARzB,6CADc,uBAAC,WAAD,wBAYdT,EACD,GAAE,CAACR,IAECqB,GAKH,4BACE,wBAAKA,EAAMM,SACX,uBAAIN,EAAMO,YACV,gBAAKC,IAAG,yCAAoCR,EAAMS,aAAeC,IAAKV,EAAMM,SAE5E,SAAC,UAAD,CAAMzB,KAAMA,KACZ,SAAC,UAAD,CAASW,QAASA,OAVb,IAaV,C","sources":["components/cast/Cast.jsx","components/reviews/Reviews.jsx","page/movieDetails/MovieDetails.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMovieCredits } from '../../services/api';\n\nfunction Cast(props) {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const creditsData = await getMovieCredits(props.movieId);\n      setCast(creditsData.cast);\n    }\n\n    fetchData();\n  }, [props.movieId]);\n\n  return (\n    <div>\n      <h2>Актори</h2>\n      <ul>\n        {cast.map((actor) => (\n          <li key={actor.id}>{actor.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Cast;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMovieReviews } from '../../services/api';\n\nfunction Reviews(props) {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const reviewsData = await getMovieReviews(props.movieId);\n      setReviews(reviewsData.results);\n    }\n\n    fetchData();\n  }, [props.movieId]);\n\n  return (\n    <div>\n      <h2>Огляди</h2>\n      <ul>\n        {reviews.map((review) => (\n          <li key={review.id}>\n            <h3>{review.author}</h3>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nReviews.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Reviews;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMovieDetails, getMovieCredits, getMovieReviews } from '../../services/api';\nimport Cast from '../../components/cast';\nimport Reviews from '../../components/reviews';\n\nfunction MovieDetails(props) {\n  const [movie, setMovie] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const movieData = await getMovieDetails(props.match.params.movieId);\n      setMovie(movieData);\n\n      const creditsData = await getMovieCredits(props.match.params.movieId);\n      setCast(creditsData.cast);\n\n      const reviewsData = await getMovieReviews(props.match.params.movieId);\n      setReviews(reviewsData.results);\n    }\n\n    fetchData();\n  }, [props]);\n\n  if (!movie) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h1>{movie.title}</h1>\n      <p>{movie.overview}</p>\n      <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.title} />\n\n      <Cast cast={cast} />\n      <Reviews reviews={reviews} />\n    </div>\n  );\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      movieId: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;"],"names":["props","useState","cast","setCast","useEffect","getMovieCredits","movieId","creditsData","fetchData","map","actor","name","id","reviews","setReviews","getMovieReviews","reviewsData","results","review","author","content","movie","setMovie","getMovieDetails","match","params","movieData","title","overview","src","poster_path","alt"],"sourceRoot":""}